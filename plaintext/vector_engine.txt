EXPORT CLAMP(value, min_value, max_value)
BEGIN
 RETURN MAX(min_value, MIN(value, max_value));
END;

EXPORT MAGNITUDE(vector)
BEGIN
 RETURN SQRT(vector[1]^2+vector[2]^2);
END;

EXPORT ANGLE(vector)
BEGIN
 IF vector[1] == 0 and vector[2] == 0 THEN
  RETURN 0;
 ELSE
  IF vector[2] > 0 THEN
   RETURN ACOS(vector[1]/MAGNITUDE(vector));
  ELSE
   RETURN 360-ACOS(vector[1]/MAGNITUDE(vector));
  END;
 END;
END;

EXPORT ROTATE_VECTOR(vector, angle)
BEGIN
 LOCAL magnitude = MAGNITUDE(vector);
 LOCAL original_angle = ANGLE(vector);
 RETURN {magnitude*COS(original_angle+angle), magnitude*SIN(original_angle+angle)};
END;

EXPORT TRANSFORM_POLYGON(vertices, position, angle, shape_scale)
BEGIN
 LOCAL transformed_vertices = {};
 FOR V FROM 1 TO SIZE(vertices) DO
  transformed_vertices := CONCAT(transformed_vertices, {(ROTATE_VECTOR(vertices[V], angle)+position)*shape_scale});
 END;
 RETURN transformed_vertices;
END;

EXPORT DRAW_POLYGON(vertices, position, angle, shape_scale, colour)
BEGIN
 LOCAL point_1, point_2, screen_point_1, screen_point_2;
 FOR L FROM 1 TO SIZE(vertices) DO
  point_1 := vertices[L];
  point_2 := vertices[1];
  IF L < SIZE(vertices) THEN
   point_2 := vertices[L+1];
  END;
  screen_point_1 := (ROTATE_VECTOR(point_1, angle)+position)*shape_scale;
  screen_point_2 := (ROTATE_VECTOR(point_2, angle)+position)*shape_scale;
  LINE_P(screen_point_1[1], screen_point_1[2], screen_point_2[1], screen_point_2[2], colour);
 END;
END;

EXPORT LIST_INSERT(list, index, value)
BEGIN
 IF index == 1 THEN
  RETURN CONCAT({value}, {list});
 END;
 IF index > SIZE(list) or index == 0 THEN
  RETURN CONCAT(list, {value});
 END;
 RETURN CONCAT(SUB(list, 1, index-1), {value}, SUB(list, index, SIZE(list)));
END;

EXPORT GENERATE_EXPLOSION(n_vertices, min_radius, max_radius)
BEGIN
 LOCAL vertices = {}, new_vertex;
 LOCAL mid_radius = (max_radius-min_radius)/2;
 FOR V FROM 1 TO n_vertices DO
  FOR N FROM -1 TO 1 STEP 2 DO
   new_vertex := ROTATE_VECTOR({0, mid_radius+N*RANDINT(0, mid_radius)}, (360/n_vertices)*V+(360/n_vertices/2)*N);
   vertices := CONCAT(vertices, {new_vertex});
  END;
 END;
 RETURN vertices;
END;

EXPORT GENERATE_TERRAIN(n_vertices, x_var, y_var, flat_length)
BEGIN
 LOCAL prev_point = {0, 0};
 LOCAL new_point;
 LOCAL terrain = {prev_point};
 FOR X FROM 1 TO n_vertices-1 DO
  new_point := prev_point+{RANDINT(1, x_var), RANDINT(-y_var/2, y_var/2)};
  terrain := CONCAT(terrain, {new_point});
  prev_point := new_point;
 END;
 // TODO: make the flat section work
 //IF flat_length > 0 THEN
 // terrain := LIST_INSERT(terrain, ROUND(n_vertices/2+1, 0), terrain[ROUND(n_vertices/2, 0)] + {flat_length, 0});
 //END;
 RETURN terrain;
END;

EXPORT GET_SEGMENTS_ON_SCREEN(vertices, pan, zoom, screen_width)
BEGIN
 LOCAL onscreen_vertices = {};
 FOR L FROM 1 TO SIZE(vertices)-1 DO
  IF vertices[L+1, 1]+pan[1] > 0 THEN
   IF vertices[L, 1]+pan[1] < screen_width/zoom THEN
    onscreen_vertices := CONCAT(onscreen_vertices, {vertices[L]}, {vertices[L+1]});
   ELSE
    RETURN onscreen_vertices;
   END;
  END;
 END; 
END;

EXPORT DRAW_TERRAIN(vertices, pan, zoom, colour)
BEGIN
 LOCAL point_1_transformed, point_2_transformed;
 FOR L FROM 1 TO SIZE(vertices)-1 DO
  point_1_transformed := (vertices[L] + pan) * zoom;
  point_2_transformed := (vertices[L + 1] + pan) * zoom;
  LINE_P(point_1_transformed[1], point_1_transformed[2], point_2_transformed[1], point_2_transformed[2], colour);
 END;
END;

//Collision detection based on https://stackoverflow.com/a/385873 and https://stackoverflow.com/a/3461533

EXPORT GET_POINT_SIDE(line_start, line_end, point)
BEGIN
 RETURN (line_end[1] - line_start[1]) * (point[2] - line_start[2]) - (line_end[2] - line_start[2]) * (point[1] - line_start[1]) > 0;
END;

EXPORT ARE_POINTS_ON_SAME_SIDE(line_start, line_end, point_a, point_b)
BEGIN
 RETURN GET_POINT_SIDE(line_start, line_end, point_a) == GET_POINT_SIDE(line_start, line_end, point_b);
END;

EXPORT ARE_LINES_INTERSECTING(line_a_start, line_a_end, line_b_start, line_b_end)
BEGIN
 RETURN ARE_POINTS_ON_SAME_SIDE(line_a_start, line_a_end, line_b_start, line_b_end) == 0 AND ARE_POINTS_ON_SAME_SIDE(line_b_start, line_b_end, line_a_start, line_a_end) == 0;
END;

EXPORT CHECK_FOR_COLLISIONS(lander_vertices, lander_rotation, lander_position, lander_circumradius, terrain_vertices)
BEGIN
 FOR N FROM 1 TO SIZE(terrain_vertices)-1 DO
  LOCAL terrain_point_a = terrain_vertices[N];
  LOCAL terrain_point_b = terrain_vertices[N+1];

  IF terrain_point_b[1] > lander_position[1] - lander_circumradius and terrain_point_a[1] < lander_position[1] + lander_circumradius THEN
   FOR L FROM 1 TO SIZE(lander_vertices) DO
    LOCAL lander_point_a = lander_vertices[L];
    LOCAL lander_point_b = lander_vertices[1];

    IF L < SIZE(lander_vertices) THEN
     lander_point_b := lander_vertices[L+1];
    END;

    LOCAL transformed_lander_point_a = ROTATE_VECTOR(lander_point_a, lander_rotation) + lander_position;
    LOCAL transformed_lander_point_b = ROTATE_VECTOR(lander_point_b, lander_rotation) + lander_position;

    IF ARE_LINES_INTERSECTING(transformed_lander_point_a, transformed_lander_point_b, terrain_point_a, terrain_point_b) THEN
     RETURN 1;
    END;
   END;
  END;
 END;
 RETURN 0;
END;

EXPORT GET_TERRAIN_Y(terrain, x_value)
BEGIN
 FOR L FROM 1 TO SIZE(terrain)-1 DO
  IF terrain[L,1] > x_value THEN
   LOCAL segment = {terrain[L-1], terrain[L]};
   LOCAL slope = (segment[2,2] - segment[1,2])/(segment[2,1] - segment[1,1]);
   LOCAL y_int = segment[1,2] - slope * segment[1,1];
   RETURN slope * x_value + y_int;
  END;
 END;
END;