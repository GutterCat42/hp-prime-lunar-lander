EXPORT MAGNITUDE(vector)
BEGIN
 RETURN SQRT(vector[1]^2+vector[2]^2);
END;

EXPORT ANGLE(vector)
BEGIN
 IF vector[1] == 0 and vector[2] == 0 THEN
  RETURN 0;
 ELSE
  IF vector[2] > 0 THEN
   RETURN ACOS(vector[1]/MAGNITUDE(vector));
  ELSE
   RETURN 360-ACOS(vector[1]/MAGNITUDE(vector));
  END;
 END;
END;

EXPORT ROTATE_VECTOR(vector, angle)
BEGIN
 LOCAL magnitude = MAGNITUDE(vector),
       original_angle = ANGLE(vector);
 RETURN {magnitude*COS(original_angle+angle), magnitude*SIN(original_angle+angle)};
END;

EXPORT VECTOR_SUM(vector_1, vector_2)
BEGIN
 RETURN {vector_1[1]+vector_2[1], vector_1[2]+vector_2[2]};
END;

EXPORT VECTOR_DIFFERENCE(vector_1, vector_2)
BEGIN
 RETURN {vector_2[1]-vector_1[1], vector_2[2]-vector_1[2]};
END;

EXPORT VECTOR_SCALE(vector, scalar_mult)
BEGIN
 RETURN {vector[1]*scalar_mult, vector[2]*scalar_mult};
END;

EXPORT POLYGON_OFFSET(vertices, offset)
BEGIN
 LOCAL adjusted_vertices = {};
 FOR P FROM 1 TO SIZE(vertices) DO
  adjusted_vertices := CONCAT(adjusted_vertices, {VECTOR_SUM(vertices[P], offset)});
 END;
 RETURN adjusted_vertices;
END;

EXPORT DRAW_POLYGON(vertices, position, angle, shape_scale, colour)
BEGIN
 FOR L FROM 1 TO SIZE(vertices) DO
  LOCAL point_1 = vertices[L], point_2 = vertices[1];
  IF L < SIZE(vertices) THEN
   point_2 := vertices[L+1];
  END;
  LOCAL point_1_rotated = ROTATE_VECTOR(point_1, angle),
        point_2_rotated = ROTATE_VECTOR(point_2, angle);
  LOCAL screen_point_1 = VECTOR_SCALE(point_1_rotated+position, shape_scale),
        screen_point_2 = VECTOR_SCALE(point_2_rotated+position, shape_scale);
  LINE_P(screen_point_1[1], screen_point_1[2], screen_point_2[1], screen_point_2[2], colour);
 END;
END;

EXPORT LIST_INSERT(list, index, value)
BEGIN
 IF index == 1 THEN
  RETURN CONCAT({value}, {list});
 END;
 IF index > SIZE(list) or index == 0 THEN
  RETURN CONCAT(list, {value});
 END;
 RETURN CONCAT(SUB(list, 1, index-1), {value}, SUB(list, index, SIZE(list)));
END;

EXPORT GENERATE_TERRAIN(n_vertices, x_var, y_var, flat_length)
BEGIN
 LOCAL prev_point = {0, 0}, new_point;
 LOCAL terrain = {prev_point};
 FOR X FROM 1 TO n_vertices-1 DO
  new_point := VECTOR_SUM(prev_point, {RANDINT(1, x_var), RANDINT(-y_var/2, y_var/2)});
  terrain := CONCAT(terrain, {new_point});
  prev_point := new_point;
 END;
 // TODO: make the flat section work
 //IF flat_length > 0 THEN
 // terrain := LIST_INSERT(terrain, ROUND(n_vertices/2+1, 0), VECTOR_SUM(terrain[ROUND(n_vertices/2, 0)], {flat_length, 0}));
 //END;
 RETURN terrain;
END;

EXPORT DRAW_TERRAIN(vertices, pan, zoom, colour, screen_width)
BEGIN
 FOR L FROM 1 TO SIZE(vertices)-1 DO
  LOCAL point_1 = vertices[L], point_2 := vertices[L+1];
  // Maybe TODO (?): add optimisation for y?
  IF point_2[1]+pan[1] > 0 and point_1[1]+pan[1] < screen_width/zoom THEN
   LOCAL point_1_scaled = VECTOR_SCALE(point_1+pan, zoom),
         point_2_scaled = VECTOR_SCALE(point_2+pan, zoom);
   LINE_P(point_1_scaled[1], point_1_scaled[2], point_2_scaled[1], point_2_scaled[2], colour);
  END;
 END;
END;

EXPORT CLAMP(value, min_val, max_val)
BEGIN
 CASE
  IF value < min_val THEN value := min_val END;
  IF value > max_val THEN value := max_val END;
 END;
 RETURN value;
END;
