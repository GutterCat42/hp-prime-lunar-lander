EXPORT MAGNITUDE(x, y)
BEGIN
 RETURN âˆš(x^2+y^2);
END;

EXPORT ANGLE(x, y)
BEGIN
 IF x == 0 and y == 0 THEN
  RETURN 0;
 ELSE
  IF y > 0 THEN
   RETURN ACOS(x/MAGNITUDE(x,y));
  ELSE
   RETURN 360-ACOS(x/MAGNITUDE(x,y));
  END;
 END;
END;

EXPORT ROTATE(x, y, angle)
BEGIN
 LOCAL magnitude = MAGNITUDE(x, y),
       original_angle = ANGLE(x, y);
 RETURN {magnitude*COS(original_angle+angle), magnitude*SIN(original_angle+angle)};
END;

EXPORT VECTOR_SUM(vector_1, vector_2)
BEGIN
 RETURN {vector_1[1]+vector_2[1], vector_1[2]+vector_2[2]};
END;

EXPORT VECTOR_DIFFERENCE(vector_1, vector_2)
BEGIN
 RETURN {vector_2[1]-vector_1[1], vector_2[2]-vector_1[2]};
END;

EXPORT POLYGON_OFFSET(vertices, offset)
BEGIN
 LOCAL adjusted_vertices = {};
 FOR P FROM 1 TO SIZE(vertices) DO
  adjusted_vertices := CONCAT(adjusted_vertices, {VECTOR_SUM(vertices[P], offset)});
 END;
 RETURN adjusted_vertices;
END;

EXPORT DRAW_POLYGON(vertices, position, angle, shape_scale)
BEGIN
 FOR L FROM 1 TO SIZE(vertices) DO
  LOCAL point_1 = vertices[L], point_2 = vertices[L+1];
  IF L == SIZE(vertices) THEN
   point_2 := vertices[0];
  END;
  LOCAL point_1_rotated = ROTATE(point_1[1]*shape_scale, point_1[2]*shape_scale, angle),
        point_2_rotated = ROTATE(point_2[1]*shape_scale, point_2[2]*shape_scale, angle);
  LINE_P(point_1_rotated[1]+position[1], point_1_rotated[2]+position[2], point_2_rotated[1]+position[1], point_2_rotated[2]+position[2]);
 END;
END;

EXPORT LIST_INSERT(list, index, value)
BEGIN
 IF index == 1 THEN
  RETURN CONCAT({value}, {list});
 END;
 IF index > SIZE(list) or index == 0 THEN
  RETURN CONCAT(list, {value});
 END;
 RETURN CONCAT(SUB(list, 1, index-1), {value}, SUB(list, index, SIZE(list)));
END;
