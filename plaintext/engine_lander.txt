//Lunar lander game for HP Prime
CONST KEY_UP = 2;
CONST KEY_DOWN = 12;
CONST KEY_LEFT = 7;
CONST KEY_RIGHT = 8;
CONST KEY_ESC = 4;
CONST SCREEN_WIDTH = 320;
CONST SCREEN_HEIGHT = 240;
CONST FOREGROUND_COLOUR = RGB(0, 255, 0);
CONST ALERT_COLOUR = RGB(255, 0, 0);
CONST BACKGROUND_COLOUR = RGB(0, 0, 0);
CONST FPS_CAP = 30;
CONST RECIPROCAL_FPS_CAP = 1 / FPS_CAP;

EXPORT ENGINE_LANDER()
BEGIN
 LOCAL lander_pos = {0, 0};
 LOCAL lander_speed = {0, 0};
 LOCAL lander_angle = 0;
 LOCAL lander_spin_rate = 0;
 LOCAL gravity = 2;
 LOCAL spin_damp_rate = 0.97;
 LOCAL air_damp = 0.96;
 LOCAL thrust = 5;
 LOCAL torque = 5;
 LOCAL fuel = 100;
 LOCAL depletion_rate = 5;
 LOCAL zoom = 1;
 LOCAL pan = {0, 0};
 LOCAL pan_rate = 0.2;
 LOCAL lander_vertices = {{-8, 0}, {0, -20}, {8, 0}};
 LOCAL exhaust_vertices = {{-8, 0}, {0, 6}, {8, 0}};
 LOCAL transformed_lander_vertices;
 LOCAL lander_side_lengths = {
   SQRT(ABS(lander_vertices[1, 1] - lander_vertices[2, 1])^2 + ABS(lander_vertices[1, 2] - lander_vertices[2, 2])^2),
   SQRT(ABS(lander_vertices[2, 1] - lander_vertices[3, 1])^2 + ABS(lander_vertices[2, 2] - lander_vertices[3, 2])^2),
   SQRT(ABS(lander_vertices[3, 1] - lander_vertices[1, 1])^2 + ABS(lander_vertices[3, 2] - lander_vertices[1, 2])^2)
 };
 // https://study.com/academy/lesson/circumradius-definition-formula.html
 LOCAL lander_circumradius = (lander_side_lengths[1] * lander_side_lengths[2] * lander_side_lengths[3]) / (
  SQRT(
    (lander_side_lengths[1] + lander_side_lengths[2] + lander_side_lengths[3]) *
    (lander_side_lengths[2] + lander_side_lengths[3] - lander_side_lengths[1]) *
    (lander_side_lengths[3] + lander_side_lengths[1] - lander_side_lengths[2]) *
    (lander_side_lengths[1] + lander_side_lengths[2] - lander_side_lengths[3])
  )
 );
 LOCAL running = true;
 LOCAL terrain_n_vertices = 50;
 LOCAL terrain_var = {30, 30};
 LOCAL flat_length = 30;
 LOCAL terrain = TRANSFORM_POLYGON(GENERATE_TERRAIN(terrain_n_vertices-1, terrain_var[1], terrain_var[2], flat_length), {0, 100}, 0, 1);
 LOCAL terrain_on_screen;
 LOCAL terrain_scan;
 LOCAL milliseconds_per_frame = 1000 / FPS_CAP;
 LOCAL frame_ticks;
 LOCAL prev_ticks = TICKS()-1;
 LOCAL fps;  
 LOCAL reciprocal_fps;
 LOCAL dt;
 LOCAL safe_speed = 2;
 LOCAL safe_angle = 5;
 LOCAL safe_terrain = 2;

 WHILE running DO
  frame_ticks := TICKS() - prev_ticks + 1;
  prev_ticks := TICKS();
  fps := 1000 / frame_ticks;
  IF fps > FPS_CAP THEN
   dt := 1000 * RECIPROCAL_FPS_CAP - frame_ticks;
   WAIT(dt * 0.001);
  END;

  reciprocal_fps := 1 / fps;

  IF ISKEYDOWN(KEY_UP) and fuel > 0 THEN
   lander_speed := lander_speed + ROTATE_VECTOR({0, -thrust * reciprocal_fps}, lander_angle);
   fuel := fuel - depletion_rate * reciprocal_fps;
  END;
  IF ISKEYDOWN(KEY_LEFT) THEN
   lander_spin_rate := lander_spin_rate - torque;
  END;
  IF ISKEYDOWN(KEY_RIGHT) THEN
   lander_spin_rate := lander_spin_rate + torque;
  END;
  IF ISKEYDOWN(KEY_ESC) THEN
   running := false;
  END;
  
  // https://stackoverflow.com/a/14014343
  lander_spin_rate := lander_spin_rate * spin_damp_rate^reciprocal_fps;
  lander_angle := lander_angle + lander_spin_rate * reciprocal_fps;
  lander_speed[2] := lander_speed[2] + gravity * reciprocal_fps;
  lander_speed := lander_speed - lander_speed * air_damp^reciprocal_fps * reciprocal_fps;
  lander_pos := lander_pos + lander_speed;
  
  RECT(BACKGROUND_COLOUR);
  
  transformed_lander_vertices := TRANSFORM_POLYGON(lander_vertices, lander_pos, lander_angle, 1);
  DRAW_POLYGON(transformed_lander_vertices, pan, 0, zoom, FOREGROUND_COLOUR);
  IF ISKEYDOWN(KEY_UP) and fuel > 0 THEN
   DRAW_POLYGON({exhaust_vertices[1], exhaust_vertices[2] + {RANDINT(-1, 1), RANDINT(0, 4)}, exhaust_vertices[3]}, lander_pos + pan, lander_angle, zoom, FOREGROUND_COLOUR);
  END;
  
  terrain_scan := GET_TERRAIN_Y(terrain_on_screen, transformed_lander_vertices[1,1])-GET_TERRAIN_Y(terrain_on_screen, transformed_lander_vertices[2,1]);
  
  IF fuel ≥ 10 THEN
   TEXTOUT_P("FUEL " +STRING(ROUND(fuel, 0)), 0, 0, 2, FOREGROUND_COLOUR);
  ELSE
   TEXTOUT_P("FUEL " +STRING(ROUND(fuel, 0)), 0, 0, 2, ALERT_COLOUR);
  END;
  IF ABS(lander_angle) ≤ safe_angle THEN
   TEXTOUT_P("ANGLE " +STRING(ROUND(lander_angle, 0)), 0, 10, 2, FOREGROUND_COLOUR);
  ELSE
   TEXTOUT_P("ANGLE " +STRING(ROUND(lander_angle, 0)), 0, 10, 2, ALERT_COLOUR);
  END;
  IF MAGNITUDE(lander_speed) ≤ safe_speed THEN
   TEXTOUT_P("SPEED " +STRING(ROUND(MAGNITUDE(lander_speed), 0)), 0, 20, 2, FOREGROUND_COLOUR);
  ELSE
   TEXTOUT_P("SPEED " +STRING(ROUND(MAGNITUDE(lander_speed), 0)), 0, 20, 2, ALERT_COLOUR);
  END;
  IF ABS(terrain_scan) ≤ safe_terrain THEN
   TEXTOUT_P("TERRAIN "+STRING(ROUND(terrain_scan, 0)), 0, 30, 2, FOREGROUND_COLOUR);
  ELSE
   TEXTOUT_P("TERRAIN "+STRING(ROUND(terrain_scan, 0)), 0, 30, 2, ALERT_COLOUR);
  END;
  TEXTOUT_P(STRING(ROUND(fps, 0)) + " FPS", SCREEN_WIDTH - 40, 0, 2, FOREGROUND_COLOUR);
  
  terrain_on_screen := GET_SEGMENTS_ON_SCREEN(terrain, pan, zoom, SCREEN_WIDTH);
  DRAW_TERRAIN(terrain_on_screen, pan, zoom, FOREGROUND_COLOUR);
  IF CHECK_FOR_COLLISIONS(lander_vertices, lander_angle, lander_pos, lander_circumradius, terrain_on_screen) THEN
   IF MAGNITUDE(lander_speed) ≤ safe_speed AND ABS(lander_angle) ≤ safe_angle AND ABS(terrain_scan) ≤ safe_terrain THEN
   ELSE
    DRAW_POLYGON(GENERATE_EXPLOSION(6, 250, 300), lander_pos+pan, 0, zoom, ALERT_COLOUR);
   END;
   running := false;
  END;

  zoom := CLAMP(zoom + (-0.02*(GET_TERRAIN_Y(terrain_on_screen, lander_pos[1])-lander_pos[2])+2 - zoom) * pan_rate/2, 0.8, 2);
  pan := pan + (({SCREEN_WIDTH * 0.5 / zoom, SCREEN_HEIGHT / 3 / zoom} - lander_pos) - pan) * pan_rate;
 END;
 WAIT(1);
 KILL;
END;