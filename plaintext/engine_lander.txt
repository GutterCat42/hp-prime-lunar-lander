// lunar lander game but ported to use the vector engine
CONST KEY_UP = 2;
CONST KEY_DOWN = 12;
CONST KEY_LEFT = 7;
CONST KEY_RIGHT = 8;
CONST KEY_ESC = 4;
CONST SCREEN_WIDTH = 320;
CONST SCREEN_HEIGHT = 240;
CONST FOREGROUND_COLOUR = RGB(0, 255, 0);
CONST BACKGROUND_COLOUR = RGB(0, 0, 0);
CONST FPS_CAP = 30;
const RECIPROCAL_FPS_CAP = 1 / FPS_CAP;

EXPORT ENGINE_LANDER()
BEGIN
 LOCAL lander_pos = {0, 0};
 LOCAL lander_speed = {0, 0};
 LOCAL lander_angle = 0;
 LOCAL lander_spin_rate = 0;
 LOCAL gravity = 5;
 LOCAL spin_damp_rate = 0.97;
 LOCAL air_damp = 0.98;
 LOCAL thrust = 15;
 LOCAL torque = 10;
 LOCAL fuel = 100;
 LOCAL depletion_rate = 10;
 LOCAL zoom = 1;
 LOCAL pan = {0, 0};
 LOCAL pan_rate = 0.2;
 LOCAL lander_vertices = {{-8, 0}, {0, -20}, {8, 0}};
 LOCAL exhaust_vertices = {{-8, 0}, {0, 6}, {8, 0}};
 LOCAL lander_side_lengths = {
   SQRT(ABS(lander_vertices[1, 1] - lander_vertices[2, 1])^2 + ABS(lander_vertices[1, 2] - lander_vertices[2, 2])^2),
   SQRT(ABS(lander_vertices[2, 1] - lander_vertices[3, 1])^2 + ABS(lander_vertices[2, 2] - lander_vertices[3, 2])^2),
   SQRT(ABS(lander_vertices[3, 1] - lander_vertices[1, 1])^2 + ABS(lander_vertices[3, 2] - lander_vertices[1, 2])^2)
 };
 // https://study.com/academy/lesson/circumradius-definition-formula.html
 LOCAL lander_circumradius = (lander_side_lengths[1] * lander_side_lengths[2] * lander_side_lengths[3]) / (
  SQRT(
    (lander_side_lengths[1] + lander_side_lengths[2] + lander_side_lengths[3]) *
    (lander_side_lengths[2] + lander_side_lengths[3] - lander_side_lengths[1]) *
    (lander_side_lengths[3] + lander_side_lengths[1] - lander_side_lengths[2]) *
    (lander_side_lengths[1] + lander_side_lengths[2] - lander_side_lengths[3])
  )
 );
 LOCAL running = true;
 LOCAL terrain_n_vertices = 50;
 LOCAL terrain_var = GET_TERRAIN_VAR();
 LOCAL flat_length = 30;
 LOCAL terrain = GENERATE_TERRAIN(terrain_n_vertices-1, terrain_var[1], terrain_var[2], flat_length);
 LOCAL terrain_on_screen;
 LOCAL milliseconds_per_frame = 1000 / FPS_CAP;
 LOCAL frame_ticks, prev_ticks = TICKS()-1;
 LOCAL fps;
 LOCAL dt;

 WHILE running DO
  frame_ticks := TICKS() - prev_ticks;
  prev_ticks := TICKS();
  fps := 1000 / frame_ticks;
  IF fps > FPS_CAP THEN
   dt := 1000 * RECIPROCAL_FPS_CAP - frame_ticks;
   WAIT(dt * 0.001);
  END;

  LOCAL reciprocal_fps = 1 / fps;

  IF ISKEYDOWN(KEY_UP) and fuel > 0 THEN
   lander_speed := lander_speed + ROTATE_VECTOR({0, -thrust * reciprocal_fps}, lander_angle);
   fuel := fuel - depletion_rate * reciprocal_fps;
  END;
  IF ISKEYDOWN(KEY_LEFT) THEN
   lander_spin_rate := lander_spin_rate - torque;
  END;
  IF ISKEYDOWN(KEY_RIGHT) THEN
   lander_spin_rate := lander_spin_rate + torque;
  END;
  IF ISKEYDOWN(KEY_ESC) THEN
   running := false;
  END;
  
  pan := pan + (({SCREEN_WIDTH*0.5/zoom, SCREEN_HEIGHT*0.3333/zoom} - lander_pos) - pan) * pan_rate;
  
  lander_spin_rate := lander_spin_rate * spin_damp_rate;
  lander_angle := lander_angle + lander_spin_rate * reciprocal_fps;
  lander_speed[2] := lander_speed[2] + gravity *reciprocal_fps;
  lander_speed := lander_speed - lander_speed * air_damp * reciprocal_fps;
  lander_pos := lander_pos + lander_speed;
  
  RECT(BACKGROUND_COLOUR);
  TEXTOUT_P("FUEL " +STRING(ROUND(fuel, 0)), 0, 0, 2, FOREGROUND_COLOUR);
  TEXTOUT_P(STRING(ROUND(fps, 0)) + " FPS", SCREEN_WIDTH-40, 0, 2, FOREGROUND_COLOUR);
  
  DRAW_POLYGON(lander_vertices, lander_pos+pan, lander_angle, zoom, FOREGROUND_COLOUR);
  IF ISKEYDOWN(KEY_UP) and fuel > 0 THEN
   DRAW_POLYGON({exhaust_vertices[1], exhaust_vertices[2]+{RANDINT(-1, 1), RANDINT(0, 4)}, exhaust_vertices[3]}, lander_pos+pan, lander_angle, zoom, FOREGROUND_COLOUR);
  END;
  
  terrain_on_screen := GET_SEGMENTS_ON_SCREEN(terrain, pan, zoom, SCREEN_WIDTH);
  DRAW_TERRAIN(terrain_on_screen, {0, 100}+pan, zoom, FOREGROUND_COLOUR);
  IF CHECK_FOR_COLLISIONS(lander_vertices, lander_angle, lander_pos, lander_circumradius, terrain_on_screen) == 1 THEN
   WAIT(1);
   running := false;
  END;
 END;
 KILL;
END;